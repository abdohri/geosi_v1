using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Web;
using System.Net;
using System.Web.UI;
using System.Web.UI.WebControls;
using GeoSI.Website.Common;
using Ext.Net;
using System.Data.SqlClient;
using System.Data;
using System.Xml.Linq;

using System.Globalization;
namespace GeoSI.Website.Modules.HistoriqueArret
{
    public partial class LoadHistoriqueArret : Page
    {
        public String adress = "";

        //Recuperation de la session user
        protected UserInfo getCurrentUser()
        {

            UserInfo retVal = null;
            object o = Session["UserInfo"];
            if (o != null)
            {
                retVal = new UserInfo();
                retVal = ((UserInfo)Session["UserInfo"]);
            }
            return retVal;


        }

        protected void FillStore(string sql, Store _store)
        {
            using (SqlDataAdapter da = new SqlDataAdapter(sql, _Global.CurrentConnection))
            {
                DataSet ds = new DataSet();
                da.SelectCommand.CommandTimeout = 120;
                da.Fill(ds);
                _store.DataSource = ds.Tables[0];
                _store.DataBind();
            }
        }
        // Accès à la base de Données 
        protected SqlDataReader Select(string _Requette)
        {
            SqlDataReader dr;
            try
            {
                SqlConnection cnx = _Global.CurrentConnection;
                SqlCommand cmd = new SqlCommand(_Requette, cnx);
                dr = cmd.ExecuteReader();
            }
            catch (Exception ex)
            {
                dr = null;
                ex.ToString();
            }
            return dr;
        }
        private string racine = null;

        //Chergement de la page 
        protected void Page_Load(object sender, EventArgs e)
        {

            string _reqVeh = "select * from (select aff.* from ( select  v.matricule ,v.vehiculeid from vehicules v  inner join affectation_vehicule_boitier abv on abv.vehiculeid=v.vehiculeid  inner join boitier b on b.boitierid=abv.boitierid inner join Datatracker d on d.imei=b.imei  inner join groupe_vehicule gv on gv.vehiculeid = v.vehiculeid and gv.actif = '1' where v.clientid =" + this.getCurrentUser().getClientId() + " and v.actif = '1' )aff union select v.matricule, v.vehiculeid from vehicules v  inner join affectation_vehicule_boitier abv on abv.vehiculeid=v.vehiculeid  inner join boitier b on b.boitierid=abv.boitierid inner join Datatracker d on d.imei=b.imei  inner join profil_vehicule gp on gp.vehiculeid =v.vehiculeid and gp.actif = '1' inner join profil p on p.profilid = gp.profilid and p.actif = '1' inner join profil_user pu on pu.actif = '1' and pu.profilid = p.profilid where v.clientid = " + this.getCurrentUser().getClientId() + " and v.actif = '1' and pu.utilisateurid =" + this.getCurrentUser().getUserId() + " ) aff2      ";
            this.FillStore(_reqVeh, Store2);
            // txt1.Text = RetrieveFormatedAddress("33.5992364201655", "-7.570799214941417");

        }





        List<Arret> ListArret = new List<Arret>();
        Datatracker track = new Datatracker();
        List<Datatracker> Listtrack = new List<Datatracker>();
        Arret arret = new Arret();
        int nbrArret=0;
      
      
        [DirectMethod]

        protected void HistoriqueArret(object sender, EventArgs e)
        {


            //   string userDate = DateTime.ParseExact(this.DateField1.Value.ToString(), "dd'/'MM'/'yyyy ", CultureInfo.InvariantCulture).ToString();
            string userDate1 = this.DateField1.Value.ToString();
            string[] du = userDate1.Split(' ');
            userDate1 = du[0] + " " + this.TimeField1.Value.ToString();

            string userDate2 = this.DateField2.Value.ToString();
            string[] du2 = userDate1.Split(' ');
            userDate2= du2[0] + " " + this.TimeField2.Value.ToString();
            int Compt = 0;
            string vehiculeid = this.MultiCombo1.SelectedItem.Value;

            //  DateTime dateUser;
            ArrayList List = new ArrayList();

            //string _req = "select d.GPSDateTime,d.latitude,d.longitude ,p.nom+' '+p.prenom as conducteur,d.contact from Datatracker d inner join boitier b on b.imei=d.imei inner join affectation_vehicule_boitier abv on abv.boitierid=b.boitierid inner join vehicules  v on v.vehiculeid = abv.vehiculeid inner join vehicule_personnel vp on vp.vehiculeid=v.vehiculeid inner join personnel p on p.personnelid=vp.personnelid where d.GPSDateTime like '%" + userDate + "%' and v.vehiculeid='" + vehiculeid + "'";
            string _req = "select * from ( select ISNULL(t.latitude, l.latitude) as latitude ,ISNULL(t.longitude, l.longitude) as longitude, ISNULL(t.GPSDateTime, l.GPSDateTime) as GPSDateTime, datediff (minute, CAST(t.gpsDateTime as datetime) ,  CAST(l.gpsDateTime as datetime)) as temp_arret from  (SELECT *, ROW_NUMBER() OVER (partition BY aff1.imei ORDER BY datatrackerid DESC) AS num2 FROM    (SELECT  d.*, ROW_NUMBER() OVER (partition BY latitude, longitude ORDER BY datatrackerid ASC) AS num   FROM    Datatracker d   inner join boitier b on b.imei=d.imei  inner join affectation_vehicule_boitier avb on b.boitierid= avb.boitierid WHERE   cast(GPSDateTime AS datetime) >= '"+userDate1+"' AND cast(GPSDateTime AS datetime) < '"+userDate2+"'and avb.vehiculeid='" + vehiculeid + "') aff1  WHERE num = 1) l  left outer join   (SELECT *, ROW_NUMBER() OVER (partition BY aff1.imei ORDER BY datatrackerid DESC) AS num2 FROM     (SELECT  d.*, ROW_NUMBER() OVER (partition BY latitude, longitude ORDER BY datatrackerid ASC) AS num  FROM    Datatracker d inner join boitier b on b.imei=d.imei  inner join affectation_vehicule_boitier avb on b.boitierid= avb.boitierid  WHERE   cast(GPSDateTime AS datetime) >= '"+userDate1+"' AND cast(GPSDateTime AS datetime) < '"+userDate2+"' and avb.vehiculeid='" + vehiculeid + "') aff1 WHERE num = 1)t on l.num2 = t.num2-1) aff where (temp_arret > 5  or temp_arret is null)";
            SqlDataReader dr = Select(_req);
          

            //while (dr.Read())
            //{
            //    Datatracker t = new Datatracker();

            //    t.GPSDateTime = dr[0].ToString();
            //    t.latitude = (double)dr[1];
            //    t.longitude = (double)dr[2];
            //    t.contact = (int)dr[4];
             
            //    Listtrack.Add(t);


            //}
            //dr.Close();
            //track=Listtrack[0];
            //DateTime date = DateTime.ParseExact(Listtrack[0].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            //for (int i = 0; i < Listtrack.Count; i++)
            //{
            //    if (Listtrack[i].contact == 0)
            //    {
            //        int j;
            //        Arret a = new Arret();
            //        a.SetDate(DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture));
            //        a.setlatitude(Listtrack[i].latitude.ToString().Replace(",", "."));
            //        a.setlongitude(Listtrack[i].longitude.ToString().Replace(",", "."));
            //        ListArret.Add(a);
            //        nbrArret++;
            //        for (j = i; j < Listtrack.Count - 1; j++)
            //        {
            //            if (Listtrack[j].contact == 1)
            //                break;

            //        }
            //        int d = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture).Minute;
            //        int dd = DateTime.ParseExact(Listtrack[j].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture).Minute;
            //        a.setduree(dd - d);
            //        i = j;
            //        track = Listtrack[i];
            //        date = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            //    }
            //    else
            //    {
            //        DateTime d1 = date.AddMinutes(1);
            //        DateTime dd1 = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            //        if (dd1 >= d1)
            //        {
            //            if (Listtrack[i].latitude == track.latitude && Listtrack[i].longitude == track.longitude)
            //                Compt++;
            //            track = Listtrack[i];
            //            date = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            //        }


            //        if (Compt >= 5)
            //        {
            //            int j;
            //            Arret a = new Arret();
            //            a.SetDate(DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture));
            //            a.setlatitude(Listtrack[i].latitude.ToString().Replace(",", "."));
            //            a.setlongitude(Listtrack[i].longitude.ToString().Replace(",", "."));
            //            ListArret.Add(a);
            //            nbrArret++;
            //            for (j = i; j < Listtrack.Count - 1; j++)
            //            {
            //                if (Listtrack[j].contact == 1)
            //                    break;

            //            }
            //            int d = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture).Minute;
            //            int dd = DateTime.ParseExact(Listtrack[j].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture).Minute;
            //            a.setduree(5 + dd - d);
            //            i = j;
            //            track = Listtrack[i];
            //            date = DateTime.ParseExact(Listtrack[i].GPSDateTime, "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            //            Compt = 0;
            //        }
            //    }
            //}




            while (dr.Read())
            {
                Arret a = new Arret();
                a.SetDate(DateTime.ParseExact(dr[2].ToString(), "dd'/'MM'/'yyyy HH:mm:ss", CultureInfo.InvariantCulture));
                a.setduree(dr[3].ToString());
                a.setlatitude(dr[0].ToString().Replace(",","."));
                 a.setlongitude(dr[1].ToString().Replace(",","."));
                 ListArret.Add(a);
            }
           

            List<object> lo = new List<object>();
            //Store Store1 = this.GridPanelVoyage.GetStore();
            for (int i = 0; i < ListArret.Count; i++)
            {
            
                string lat = ListArret[i].latitude;
                string lng = ListArret[i].longitude;
                string adr = RetrieveFormatedAddress(lat, lng);


                lo.Add(new object[] { adr, ListArret[i].date.ToShortDateString() + " " + ListArret[i].date.ToLongTimeString(), ListArret[i].duree + " min", ListArret[i].latitude, ListArret[i].longitude }
    );

               
            }


            Store1.Add(lo);
            Store1.CommitChanges();

        }


        static string baseUri = "http://maps.googleapis.com/maps/api/" + "geocode/xml?latlng={0},{1}&sensor=false";

        public 
            string RetrieveFormatedAddress(string lat, string lng)
        {
            string requestUri = string.Format(baseUri, lat, lng);
            using (WebClient wc = new WebClient())
            {
                wc.DownloadStringCompleted += new DownloadStringCompletedEventHandler(wc_DownloadStringCompleted);

                return wc.DownloadString(new Uri(requestUri));


            }
        }
        public void wc_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
        {
            string add = "";
            var xmlElm = XElement.Parse(e.Result);
            var status = (from elm in xmlElm.Descendants() where elm.Name == "status" select elm).FirstOrDefault();
            if (status.Value.ToLower() == "ok")
            {
                var res = (from elm in xmlElm.Descendants() where elm.Name == "formatted_address" select elm).FirstOrDefault();
                add = res.Value;

                // Console.WriteLine(res.Value); 
            }
            else
            {
                //Console.WriteLine("No Address Found");
                add = "NOOOOOOO";
            }
        }




    }
}
